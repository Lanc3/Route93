generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  name                String
  phone               String?
  role                String     @default("CLIENT")
  hashedPassword      String     @default("")
  salt                String     @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  addresses           Address[]
  cartItems           CartItem[]
  orders              Order[]
  reviews             Review[]
  searchAnalytics     SearchAnalytics[]
  recentlyViewed      RecentlyViewed[]

  @@map("users")
}

model Product {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  price       Float
  salePrice   Float?
  sku         String              @unique
  slug        String              @unique
  status      String              @default("ACTIVE")
  inventory   Int                 @default(0)
  images      String?
  tags        String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  categoryId  Int?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  collections ProductCollection[]
  category    Category?           @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  variants    ProductVariant[]
  options     ProductOption[]
  searchAnalytics SearchAnalytics[]
  recentlyViewed   RecentlyViewed[]
  searchIndex      ProductSearchIndex[]

  @@map("products")
}

model ProductVariant {
  id          Int      @id @default(autoincrement())
  productId   Int
  sku         String   @unique
  size        String?
  color       String?
  material    String?
  price       Float?
  salePrice   Float?
  inventory   Int      @default(0)
  weight      Float?
  images      String?
  isDefault   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("product_variants")
}

model ProductOption {
  id          Int      @id @default(autoincrement())
  productId   Int
  name        String   // e.g., "Engraving", "Personalization"
  type        String   // "text", "select", "checkbox", "textarea"
  required    Boolean  @default(false)
  options     String?  // JSON array of option values for select type
  price       Float    @default(0)
  maxLength   Int?     // For text/textarea types
  placeholder String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_options")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  slug        String     @unique
  parentId    Int?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Collection {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  slug        String              @unique
  image       String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           Int        @id @default(autoincrement())
  productId    Int
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Order {
  id                Int         @id @default(autoincrement())
  orderNumber       String      @unique
  status            String      @default("PENDING")
  totalAmount       Float
  discountAmount    Float       @default(0)
  shippingCost      Float       @default(0)
  taxAmount         Float       @default(0)
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            Int
  shippingAddressId Int
  billingAddressId  Int
  orderItems        OrderItem[]
  orderDiscounts    OrderDiscount[]
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  payments          Payment[]

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Float
  totalPrice Float
  orderId    Int
  productId  Int
  variantId  Int?     // Optional for backward compatibility
  options    String?  // JSON string of selected options
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  variantId Int?     // Optional for backward compatibility
  options   String?  // JSON string of selected options
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId]) // Keep original constraint for backward compatibility
  @@map("cart_items")
}

model Address {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  zipCode        String
  country        String   @default("US")
  phone          String?
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")

  @@map("addresses")
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  status        String   @default("PENDING")
  method        String
  transactionId String?
  errorCode     String?
  errorMessage  String?
  errorType     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  productId  Int
  variantId  Int?     // Optional for variant-specific reviews
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId]) // Keep original constraint for backward compatibility
  @@map("reviews")
}

model Email {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  template  String
  context   String?  // JSON string of template context
  status    String   @default("PENDING") // PENDING, SENT, FAILED
  sentAt    DateTime?
  error     String?
  priority  String   @default("NORMAL") // HIGH, NORMAL, LOW
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emails")
}

model SearchAnalytics {
  id            Int      @id @default(autoincrement())
  query         String
  resultCount   Int      @default(0)
  filters       String?  // JSON string of applied filters
  userId        Int?     // null for anonymous users
  sessionId     String?  // for tracking anonymous users
  ipAddress     String?
  userAgent     String?
  clickedProductId Int?  // Product clicked from search results
  searchTime    Int      // Search execution time in milliseconds
  createdAt     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  clickedProduct Product? @relation(fields: [clickedProductId], references: [id], onDelete: SetNull)

  @@map("search_analytics")
}

model RecentlyViewed {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  viewedAt   DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("recently_viewed")
}

model ProductSearchIndex {
  id         Int      @id @default(autoincrement())
  productId  Int
  searchText String   // Combined searchable text (name + description + tags + category)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_search_index")
}

model DiscountCode {
  id                Int                @id @default(autoincrement())
  code              String             @unique
  name              String
  description       String?
  type              String             // "fixed", "percentage", "free_shipping", "bogo"
  value             Float?             // For fixed/percentage amounts
  minOrderValue     Float?             // Minimum order value to qualify
  maxDiscount       Float?             // Maximum discount for percentage codes
  usageLimit        Int?               // Total usage limit
  usageCount        Int                @default(0)
  perCustomerLimit  Int?               // Usage limit per customer
  isActive          Boolean            @default(true)
  startsAt          DateTime?
  expiresAt         DateTime?
  applicableTo      String             @default("all") // "all", "categories", "products"
  categoryIds       String?            // JSON array of category IDs
  productIds        String?            // JSON array of product IDs
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  orderDiscounts    OrderDiscount[]

  @@map("discount_codes")
}

model OrderDiscount {
  id             Int          @id @default(autoincrement())
  orderId        Int
  discountCodeId Int
  discountCode   String
  discountType   String
  discountValue  Float
  discountAmount Float
  createdAt      DateTime     @default(now())

  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount       DiscountCode @relation(fields: [discountCodeId], references: [id])

  @@map("order_discounts")
}
