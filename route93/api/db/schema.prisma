// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// E-commerce database schema for Route93

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  name                String
  phone               String?
  role                String    @default("CLIENT")
  hashedPassword      String    @default("")
  salt                String    @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  orders     Order[]
  addresses  Address[]
  cartItems  CartItem[]
  reviews    Review[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  salePrice   Float?
  sku         String   @unique
  slug        String   @unique
  status      String @default("ACTIVE")
  inventory   Int      @default(0)
  images      String? // JSON string of image URLs
  tags        String? // JSON string of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    Int?
  category      Category? @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  collections   ProductCollection[]

  @@map("products")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slug        String   @unique
  parentId    Int?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slug        String   @unique
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           Int        @id @default(autoincrement())
  productId    Int
  collectionId Int
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  status        String @default("PENDING")
  totalAmount   Float
  shippingCost  Float       @default(0)
  taxAmount     Float       @default(0)
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId          Int
  user            User @relation(fields: [userId], references: [id])
  shippingAddress Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddressId Int
  billingAddressId  Int
  
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  quantity  Int
  price     Float
  totalPrice Float

  // Relations
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Address {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  zipCode    String
  country    String  @default("US")
  phone      String?
  isDefault  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Float
  status        String @default("PENDING")
  method        String
  transactionId String?
  errorCode     String?
  errorMessage  String?
  errorType     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// String-based enums for SQLite compatibility
// Role: "CLIENT", "ADMIN"
// ProductStatus: "ACTIVE", "INACTIVE", "OUT_OF_STOCK"
// OrderStatus: "PENDING", "CONFIRMED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED", "REFUNDED"
// PaymentStatus: "PENDING", "COMPLETED", "FAILED", "REFUNDED"
// PaymentMethod: "CREDIT_CARD", "PAYPAL", "STRIPE", "BANK_TRANSFER"
