generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  name                String
  phone               String?
  role                String     @default("CLIENT")
  hashedPassword      String     @default("")
  salt                String     @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  addresses           Address[]
  cartItems           CartItem[]
  orders              Order[]
  reviews             Review[]
  searchAnalytics     SearchAnalytics[]
  recentlyViewed      RecentlyViewed[]
  mediaAssets         MediaAsset[]

  @@map("users")
}

model MediaAsset {
  id           Int      @id @default(autoincrement())
  publicId     String   @unique // Cloudinary public ID
  url          String   // Cloudinary URL
  secureUrl    String   // HTTPS URL
  format       String   // jpg, png, webp, etc.
  width        Int
  height       Int
  bytes        Int      // File size in bytes
  originalName String   // Original filename
  altText      String?  // Alt text for accessibility
  tags         String?  // JSON array of tags
  folder       String?  // Cloudinary folder path
  uploadedBy   Int      // User who uploaded the image
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@map("media_assets")
}

model Product {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  price       Float
  salePrice   Float?
  sku         String              @unique
  slug        String              @unique
  status      String              @default("ACTIVE")
  inventory   Int                 @default(0)
  images      String?             // Keep for backward compatibility
  mediaAssets String?             // JSON array of MediaAsset IDs
  primaryImageId Int?             // Primary image MediaAsset ID
  tags        String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  categoryId  Int?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  collections ProductCollection[]
  category    Category?           @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  variants    ProductVariant[]
  options     ProductOption[]
  searchAnalytics SearchAnalytics[]
  recentlyViewed   RecentlyViewed[]
  searchIndex      ProductSearchIndex[]

  @@map("products")
}

model ProductVariant {
  id          Int      @id @default(autoincrement())
  productId   Int
  sku         String   @unique
  size        String?
  color       String?
  material    String?
  price       Float?
  salePrice   Float?
  inventory   Int      @default(0)
  weight      Float?
  images      String?
  isDefault   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("product_variants")
}

model ProductOption {
  id          Int      @id @default(autoincrement())
  productId   Int
  name        String   // e.g., "Engraving", "Personalization"
  type        String   // "text", "select", "checkbox", "textarea"
  required    Boolean  @default(false)
  options     String?  // JSON array of option values for select type
  price       Float    @default(0)
  maxLength   Int?     // For text/textarea types
  placeholder String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_options")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  slug        String     @unique
  parentId    Int?
  image       String?
  vatRate     Float      @default(23.0) // Default Irish standard VAT rate
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Collection {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  slug        String              @unique
  image       String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           Int        @id @default(autoincrement())
  productId    Int
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Order {
  id                Int         @id @default(autoincrement())
  orderNumber       String      @unique
  status            String      @default("PENDING")
  totalAmount       Float
  discountAmount    Float       @default(0)
  shippingCost      Float       @default(0)
  taxAmount         Float       @default(0)
  orderType         String      @default("REGULAR") // "REGULAR" or "PRINT"
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            Int
  shippingAddressId Int
  billingAddressId  Int
  // Tracking fields
  trackingNumber    String?
  carrier           String?     @default("An Post")
  shippedAt         DateTime?
  deliveredAt       DateTime?
  estimatedDelivery DateTime?
  trackingEvents    Json?       // Store tracking history as JSON
  orderItems        OrderItem[]
  orderDiscounts    OrderDiscount[]
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  payments          Payment[]
  taxRecord         TaxRecord?

  @@map("orders")
}

model OrderItem {
  id              Int            @id @default(autoincrement())
  quantity        Int
  price           Float
  totalPrice      Float
  orderId         Int
  productId       Int
  variantId       Int?           // Optional for backward compatibility
  options         String?        // JSON string of selected options
  designUrl       String?        // URL of selected design for print orders
  designId        String?        // Cloudinary public ID of selected design
  printFee        Float?         // Additional print fee (€20) for print orders
  printableItemId Int?           // ID of selected printable item for custom prints
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product        @relation(fields: [productId], references: [id])
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
  printableItem   PrintableItem? @relation(fields: [printableItemId], references: [id])

  @@map("order_items")
}

model CartItem {
  id              Int            @id @default(autoincrement())
  quantity        Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          Int
  productId       Int
  variantId       Int?           // Optional for backward compatibility
  options         String?        // JSON string of selected options
  designUrl       String?        // URL of selected design for print orders
  designId        String?        // Cloudinary public ID of selected design
  printFee        Float?         // Additional print fee (€20) for print orders
  printableItemId Int?           // ID of selected printable item for custom prints
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
  printableItem   PrintableItem? @relation(fields: [printableItemId], references: [id])

  @@unique([userId, productId]) // Keep original constraint for backward compatibility
  @@map("cart_items")
}

model Address {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  zipCode        String
  country        String   @default("US")
  phone          String?
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")

  @@map("addresses")
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  status        String   @default("PENDING")
  method        String
  transactionId String?
  errorCode     String?
  errorMessage  String?
  errorType     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  productId  Int
  variantId  Int?     // Optional for variant-specific reviews
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId]) // Keep original constraint for backward compatibility
  @@map("reviews")
}

model Email {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  template  String
  context   String?  // JSON string of template context
  status    String   @default("PENDING") // PENDING, SENT, FAILED
  sentAt    DateTime?
  error     String?
  priority  String   @default("NORMAL") // HIGH, NORMAL, LOW
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emails")
}

model SearchAnalytics {
  id            Int      @id @default(autoincrement())
  query         String
  resultCount   Int      @default(0)
  filters       String?  // JSON string of applied filters
  userId        Int?     // null for anonymous users
  sessionId     String?  // for tracking anonymous users
  ipAddress     String?
  userAgent     String?
  clickedProductId Int?  // Product clicked from search results
  searchTime    Int      // Search execution time in milliseconds
  createdAt     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  clickedProduct Product? @relation(fields: [clickedProductId], references: [id], onDelete: SetNull)

  @@map("search_analytics")
}

model RecentlyViewed {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  viewedAt   DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("recently_viewed")
}

model ProductSearchIndex {
  id         Int      @id @default(autoincrement())
  productId  Int
  searchText String   // Combined searchable text (name + description + tags + category)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_search_index")
}

model DiscountCode {
  id                Int                @id @default(autoincrement())
  code              String             @unique
  name              String
  description       String?
  type              String             // "fixed", "percentage", "free_shipping", "bogo"
  value             Float?             // For fixed/percentage amounts
  minOrderValue     Float?             // Minimum order value to qualify
  maxDiscount       Float?             // Maximum discount for percentage codes
  usageLimit        Int?               // Total usage limit
  usageCount        Int                @default(0)
  perCustomerLimit  Int?               // Usage limit per customer
  isActive          Boolean            @default(true)
  startsAt          DateTime?
  expiresAt         DateTime?
  applicableTo      String             @default("all") // "all", "categories", "products"
  categoryIds       String?            // JSON array of category IDs
  productIds        String?            // JSON array of product IDs
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  orderDiscounts    OrderDiscount[]

  @@map("discount_codes")
}

model OrderDiscount {
  id             Int          @id @default(autoincrement())
  orderId        Int
  discountCodeId Int
  discountCode   String
  discountType   String
  discountValue  Float
  discountAmount Float
  createdAt      DateTime     @default(now())

  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount       DiscountCode @relation(fields: [discountCodeId], references: [id])

  @@map("order_discounts")
}

model TaxRate {
  id          Int      @id @default(autoincrement())
  name        String   // "Standard", "Reduced", "Zero", "Exempt"
  rate        Float    // VAT rate as percentage (e.g., 23.0 for 23%)
  description String?
  country     String   @default("IE")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  taxRecords  TaxRecord[]

  @@map("tax_rates")
}

model TaxRecord {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  orderNumber     String
  customerType    String   // "B2C", "B2B_IE", "B2B_EU", "B2B_NON_EU"
  customerCountry String   @default("IE")
  customerVatNumber String?
  
  // Order totals
  subtotal        Float    // Order total before VAT
  vatAmount       Float    // Total VAT charged
  totalAmount     Float    // Final amount including VAT
  
  // Tax breakdown
  standardVat     Float    @default(0) // VAT at 23%
  reducedVat      Float    @default(0) // VAT at 13.5%
  secondReducedVat Float   @default(0) // VAT at 9%
  zeroVat         Float    @default(0) // VAT at 0%
  exemptAmount    Float    @default(0) // Exempt from VAT
  
  // Compliance fields
  vatNumber       String?  // Our VAT number
  invoiceNumber   String?  // Invoice reference
  reverseCharge   Boolean  @default(false) // EU B2B reverse charge
  
  // Reporting periods
  taxPeriod       String   // "2024-Q1", "2024-01", etc.
  reportingYear   Int
  reportingQuarter Int?
  reportingMonth  Int?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  taxRateId       Int?
  taxRate         TaxRate? @relation(fields: [taxRateId], references: [id])

  @@map("tax_records")
}

model TaxReturn {
  id                Int      @id @default(autoincrement())
  period            String   // "2024-Q1", "2024-01"
  periodType        String   // "monthly", "quarterly"
  startDate         DateTime
  endDate           DateTime
  
  // VAT Summary
  totalSales        Float    @default(0)
  totalVatCollected Float    @default(0)
  totalVatDue       Float    @default(0)
  
  // VAT breakdown by rate
  standardVatSales  Float    @default(0)
  standardVatAmount Float    @default(0)
  reducedVatSales   Float    @default(0)
  reducedVatAmount  Float    @default(0)
  secondReducedVatSales Float @default(0)
  secondReducedVatAmount Float @default(0)
  zeroVatSales      Float    @default(0)
  exemptSales       Float    @default(0)
  
  // EU transactions
  euB2BSales        Float    @default(0)
  euB2CSales        Float    @default(0)
  
  // Filing information
  status            String   @default("DRAFT") // DRAFT, FILED, PAID
  filedAt           DateTime?
  filedBy           String?
  rosReference      String?  // Revenue Online Service reference
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([period])
  @@map("tax_returns")
}

model PrintableItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?     // Cloudinary URL for the printable item
  publicId    String?     // Cloudinary public ID
  status      String      @default("ACTIVE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[] // Order items that reference this printable item
  cartItems   CartItem[]  // Cart items that reference this printable item

  @@map("printable_items")
}

model Design {
  id          Int      @id @default(autoincrement())
  name        String   // Design name/title
  description String?  // Optional description
  imageUrl    String   // Cloudinary URL for the design image
  publicId    String   // Cloudinary public ID
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("designs")
}
